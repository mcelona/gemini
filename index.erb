<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    
    <script src="https://d3js.org/d3.v4.min.js"></script>
    
    <style>
      div.tooltip {	
        position: absolute;			
        text-align: center;			
        pointer-events: none;	
        font-size: 12px;
        font-weight: bold;
        text-align: left;
        background-color: #ccc;	
        padding: 4px;
        border-radius: 2px;
      }
      
      .overlay {
        fill: none;
        pointer-events: all;
      }
      
      .focus circle {
        fill: none;
        stroke: red;
      }
    </style>
    
  </head>
  <body>
    <svg id="prices" width="1200" height="200"></svg>
    <svg id="macd" width="1000" height="200"></svg>
    
    <script>
      var closes = JSON.parse( '<%= closes %>' );
      closes.forEach(function(d) {
        d.timestamp = new Date(d.timestamp);
        d.price = +d.price;
      });
      closes.sort(function(a, b) { return a.timestamp - b.timestamp; });
      console.log( closes );
      
      var macd_data = JSON.parse( '<%= macd %>' );
      console.log( macd_data );
      
      var svg = d3.select("#prices"),
          margin = {top: 20, right: 20, bottom: 30, left: 50},
          width = +svg.attr("width") - margin.left - margin.right,
          height = +svg.attr("height") - margin.top - margin.bottom,
          g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
          
      var macd = d3.select("#macd"),
          margin = {top: 20, right: 20, bottom: 30, left: 50},
          width = +macd.attr("width") - margin.left - margin.right,
          height = +macd.attr("height") - margin.top - margin.bottom,
          macdg = macd.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var format = d3.timeFormat("%y-%m-%d-%H");
      
      var div = d3.select("body").append("div")	
        .attr("class", "tooltip")				
        .style("opacity", 0);

      var x = d3.scaleTime()
          .rangeRound([0, width]);

      var y = d3.scaleLinear()
          .rangeRound([height, 0]);
      var macdy = d3.scaleLinear()
          .rangeRound([height, 0]);

      var line = d3.line()
        .x(function(d) { return x( d.timestamp ); })
        .y(function(d) { return y(d.price); });
        
      var macd_line = d3.line()
        .x(function(d, i) { return x( closes[i].timestamp ); })
        .y(function(d) { return macdy( d == null ? 0 : d[0] ); });
      
      var macd_signal_line = d3.line()
        .x(function(d, i) { return x( closes[i].timestamp ); })
        .y(function(d) { return macdy( d == null ? 0 : d[1] ); });
      
      x.domain(d3.extent(closes, function(d) { return d.timestamp; }));
      y.domain([d3.min(closes, function(d) { return d.price; }), d3.max(closes, function(d) { return d.price; })]);
      
      macdy.domain([d3.min(macd_data.output, function(d) { return d == null ? 0 : d[0]; }), d3.max(macd_data.output, function(d) { return d == null ? 0 : d[0]; })]);
      
      g.append("g")
                   .attr("transform", "translate(0," + height + ")")
                   .call(d3.axisBottom(x)
                     .tickFormat( format )
                   )
                 .select(".domain")
                 .remove();
      
      macdg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
          .tickFormat( format )
        );

      g.append("g")
        .call( d3.axisLeft(y) )
      macdg.append("g")
        .call( d3.axisLeft(macdy) )

      g.append("path")
       .datum(closes)
       .attr("fill", "none")
       .attr("stroke", "steelblue")
       .attr("stroke-linejoin", "round")
       .attr("stroke-linecap", "round")
       .attr("stroke-width", 2)
       .attr("d", line);
      
      macdg.append("path")
           .datum(macd_data.output)
           .attr("fill", "none")
           .attr("stroke", "steelblue")
           .attr("stroke-linejoin", "round")
           .attr("stroke-linecap", "round")
           .attr("stroke-width", 2)
           .attr("d", macd_line);
        
      macdg.append("path")
           .datum(macd_data.output)
           .attr("fill", "none")
           .attr("stroke", "#ccc")
           .attr("stroke-linejoin", "round")
           .attr("stroke-linecap", "round")
           .attr("stroke-width", 2)
           .attr("d", macd_signal_line );
        
      g.selectAll("dot") 
       .data(closes)      
       .enter().append("circle")                
       .attr("r", 1)    
       .attr("cx", function(d) { return x( d.timestamp ); })     
       .attr("cy", function(d) { return y(d.price); });
       
       var focus = g.append("g")
        .attr("class", "focus")
        .style("display", "none");

       focus.append("circle")
        .attr("r", 3);
        
        focus.append("text")
              .attr("x", 10)
              .attr("dy", ".5em")
              .attr("font-size", "13px")
              .attr("fill", "steelblue");
              
        g.append("rect")
              .attr("class", "overlay")
              .attr("width", width)
              .attr("height", height)
              .on("mouseover", function() { focus.style("display", null); })
              .on("mouseout", function() { focus.style("display", "none"); })
              .on("mousemove", mousemove);
         
        var bisectDate = d3.bisector(function(d) { return d.timestamp; }).left;
        
        function mousemove() {
          var x0 = x.invert(d3.mouse(this)[0]),
              i = bisectDate(closes, x0, 1),
              d0 = closes[i - 1],
              d1 = closes[i];
              d = x0 - d0.timestamp > d1.timestamp - x0 ? d1 : d0;
            
          focus.attr("transform", "translate(" + x(d.timestamp) + "," + y(d.price) + ")");
          focus.select("text").text( d.price );
        }
    </script>
    
  </body>
</html>